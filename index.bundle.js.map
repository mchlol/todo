{"version":3,"file":"index.bundle.js","mappings":"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","sources":["webpack://todo/./src/dom.js","webpack://todo/webpack/bootstrap","webpack://todo/webpack/runtime/define property getters","webpack://todo/webpack/runtime/hasOwnProperty shorthand","webpack://todo/./src/index.js"],"sourcesContent":["const taskList = document.querySelector('#task-list');\n\nfunction createLiElement(task) {\n    // create the elements and add class names and attributes where required\n    let listItem = document.createElement('li');\n    listItem.classList.add('list-group-item', 'task-item-wrapper', 'p-1')\n    listItem.setAttribute('id', task.id);\n\n    let taskPrimaryWrap = document.createElement('div');\n    taskPrimaryWrap.classList.add('task-text-primary')\n\n    let check = document.createElement('input');\n    check.type = 'checkbox';\n    check.classList.add('form-check-input', 'm-1')\n    \n    let title = document.createElement('span');\n    title.classList.add('fw-bold', 'm-1')\n    title.textContent = task.title;\n\n    let taskSecondaryWrap = document.createElement('div');\n    taskSecondaryWrap.classList.add('task-text-secondary', 'text-muted', 'small');\n\n    let notes = document.createElement('p');\n    notes.classList.add('m-1','text-justify');\n    notes.textContent = task.taskNotes;\n\n    let detailsRow = document.createElement('div');\n    detailsRow.classList.add('d-flex', 'flex-wrap','justify-content-between','align-items-center');\n\n    let dueDate = document.createElement('span');\n    dueDate.classList.add('small','m-1');\n    if (!task.dueDate) {\n        dueDate.textContent = 'No due date';\n    }  else dueDate.textContent = `Due ${task.dueDate}`;\n\n    let priority = document.createElement('span');\n    priority.classList.add('small','m-1');\n    priority.textContent = task.priority + ' priority';\n\n    let iconWrap = document.createElement('div');\n    iconWrap.classList.add('d-flex');\n\n    let editBtn = document.createElement('button');\n    editBtn.classList.add('btn','btn-sm');\n    editBtn.setAttribute('id','edit');\n    editBtn.innerHTML = `<span class=\"material-icons text-primary\">mode</span>`;\n\n    let delBtn = document.createElement('button');\n    delBtn.classList.add('btn','btn-sm');\n    delBtn.setAttribute('id','delete');\n    delBtn.innerHTML = `<span class=\"material-icons text-danger\">delete</span>`;\n\n    // append the elements\n    iconWrap.appendChild(editBtn);\n    iconWrap.appendChild(delBtn);\n\n    detailsRow.appendChild(dueDate);\n    detailsRow.appendChild(priority)\n    detailsRow.appendChild(iconWrap);\n\n    taskSecondaryWrap.appendChild(notes);\n    taskSecondaryWrap.appendChild(detailsRow);\n\n    taskPrimaryWrap.appendChild(check)\n    taskPrimaryWrap.appendChild(title);\n    \n    listItem.appendChild(taskPrimaryWrap);\n    listItem.appendChild(taskSecondaryWrap);\n\n    // return the final li element appended to the ul element?\n    return taskList.appendChild(listItem);\n}\n\nexport {\n    createLiElement\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// import the modules first\nimport { createLiElement } from './dom.js';\nimport './input.scss';\n\nconst form = document.querySelector('#add-task-form');\nconst list = document.querySelector('#task-list');\nlet tasks = [];\n\n// every time the tasks array is changed in any way, those changes are mirrored to local storage and the new tasks are displayed.\n\n// ## DEBUGGING FUNCTION ##\nfunction showState() {\n    console.log('calling showState()...');\n    console.table('tasks', tasks);\n    console.table('localStorage tasks', JSON.parse(localStorage.getItem('tasks')));\n}\n\n// when the form is submitted (task is added):\nfunction handleSubmit(event) {\n    console.log('calling handleSubmit()..');\n    // stop the 'page refresh with data in the url' behaviour\n    event.preventDefault(); \n\n    // create the task in an object\n    const task = {\n        title: event.currentTarget.title.value,\n        taskNotes: event.currentTarget.tasknotes.value,\n        dueDate: event.currentTarget.dueDate.value,\n        priority: event.currentTarget.priority.value,\n        id: Date.now(),\n        completed: false,\n        // to do: assign task category\n    };\n    // add the new object to the array\n    tasks.push(task); \n    // log the state of the tasks array\n    console.log(tasks);\n    console.log(`No. of tasks in state: ${tasks.length}`);\n    // clear the form inputs\n    event.target.reset();\n    // dispatch a custom event to the list element to say the tasks array state has changed\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n}\n\n\nfunction displayTasks() {\n    console.log('calling displayTasks()...');\n    showState();\n    // clear all the innerHTML of the ul element\n    console.log('clearing list html');\n    list.innerHTML = '';\n    // create a variable called html which will loop over each item in the tasks array and run the DOM function exported from the dom.js module.\n    console.log('repopulating list from tasks array');\n    const html = tasks.forEach(\n        task => createLiElement(task)\n    );\n    return html;\n}\n\n\n// if the tasks array is empty, don't do anything with local storage as it wipes any data already stored there\n\nfunction mirrorToLocalStorage() {\n    console.log('calling mirrorToLocalStorage()...');\n    if (!tasks[0]) {\n        // if the tasks array is empty do nothing\n        return console.log('nothing in tasks array');\n    } else {\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n        console.log('tasks array mirrored to local storage');\n        // access the key 'tasks' in localStorage and overwrite it with the tasks array (converted to a string) \n        showState();\n    }\n}\n\nfunction restoreFromLocalStorage() {\n    console.log('calling restoreFromLocalStorage...');\n    // create a variable and assign it the contents of the local storage 'tasks' key (converted back to an array of objects)\n    const localStorageTasks = JSON.parse(localStorage.getItem('tasks'));\n\n    if (!localStorageTasks) { \n        // if this variable is falsy;\n        console.log('no tasks in localStorage yet')\n    } else {\n        // assign the data from localStorage to the tasks array\n        tasks = localStorageTasks;\n        list.dispatchEvent(new CustomEvent('tasksUpdated'));\n    }\n}\n\n// find the item in the tasks array with the corresponding id from the element and remove it from the array, then call the function to display the new array. \nfunction deleteTask(id) {\n    console.log('calling deleteTask()...');\n    console.log('deleting task', id);\n    // filter the tasks to leave only those that do NOT match the id\n    console.log('filtering tasks array to leave those without ', id);\n    let filteredTasks = tasks.filter(task => task.id != id);\n    console.log('filtered tasks: ', filteredTasks);\n    // log the new array\n    tasks = filteredTasks;\n    showState();\n    // dispatch the tasks updated event...\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n}\n\nfunction deleteTaskAnotherWay(id) {\n    console.log('calling deleteTaskAnotherWay()...');\n    showState();\n    console.log('looking for task with id',id);\n\n    let index = tasks.findIndex(task => task.id == id);\n    console.log('index of item in tasks array?...',index);\n\n    let stored = JSON.parse(localStorage.getItem('tasks'));\n    console.log(stored);\n    let indexInStorage = stored.findIndex(task => task.id == id);\n\n    console.log('index of item in stored array???...',indexInStorage);\n}\n\n// mark a task as complete and update its status on the page and in local storage\nfunction markComplete(id) {\n    console.log('calling markComplete()...')\n    console.log(`changed task ${id} complete status`);\n    // use find() to go through the tasks array and find the first one that has an id the same as the argument\n    const taskRef = tasks.find(task => task.id === id);\n    // taskRef.completed = !taskRef.completed;\n    console.log(taskRef);\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n};\n\nfunction handleClick(event) {\n    console.log('running handleClick()...');\n    // get the id of the closest list element\n    const id = event.target.closest('li').id;\n    console.log('id: ', id);\n    // check if the element clicked was a span\n    if (event.target.matches('span')) {\n        // if it is, check if the nearest parent is a button with the id 'delete' (so we can add edit later)\n        console.log('span clicked');\n        if (event.target.closest('button')) {\n            // if true call the delete function with the id\n            console.log('closest element is a button');\n            deleteTask(id);\n        }\n    } else if (event.target.matches('input[type=checkbox]')) {\n        console.log('checkbox clicked');\n        markComplete(id);\n    }\n};\n\n\n// ## EVENT LISTENERS ##\n\n// when the form is submitted (a task is added), run the handleSubmit function\nform.addEventListener('submit', handleSubmit);\n\n// when the tasksUpdated custom event fires:\n// display tasks\nlist.addEventListener('tasksUpdated', displayTasks);\n// and copy them to local storage\nlist.addEventListener('tasksUpdated', mirrorToLocalStorage);\n// OR use an anonymous function to pass an argument \n// list.addEventListener('tasksUpdated', () => { mirrorToLocalStorage(tasks) });\n\n// when a checkbox or edit/delete icon is clicked:\nlist.addEventListener('click', handleClick);\n\nrestoreFromLocalStorage(tasks);\n\n\n// ## modules? ## //\n\n// check task due date\nconst checkDueDate = (date) => {\n    // create a variable to hold the current date\n    const today = new Date();\n    // convert that value to a date string\n    const todayString = today.toDateString();\n    // create a variable to hold the date from the argument\n    const dateInput = new Date(date);\n    // convert that to a date string too\n    const dateString = dateInput.toDateString();\n    // create a variable to hold the return value\n    let showDueDay;\n\n    // if the argument is the same as todays date\n    if (todayString === dateString) {\n        showDueDay = `Today`;\n    } \n    // if the argument is less the todays date\n    else if (Date.parse(date) < today) {\n        // here should also check if the task was already completed i.e. task == completed ? 'completed' : 'today, overdue warning'\n        showDueDay = `Overdue`;\n    } \n    // if the date cannot be parsed e.g. there is no date input at all \n    else if (!Date.parse(date)) {\n        showDueDay = `Someday`;\n    } \n    // if the date string is truthy but not today or less than todays date\n    else if (dateString) {\n        showDueDay = `Soon`;\n    }\n\n    return showDueDay;\n};\n\n\n// convert date to human readable format\nconst dateHandler = (date) => {\n    let dayOfWeek = date.getDay();\n    let dayOfMonth = date.getDate();\n    let month = date.getMonth();\n    let year = date.getYear();\n    let string = `${dayOfWeek} ${dayOfMonth} ${month} ${year}`;\n    return string;\n}\n\n    // task class\n    // could creating a task also be a module?\n    // class Task {\n    //     constructor(title,notes,dueDate,priority,category) {\n    //     this.title = title;\n    //     this.notes = notes;\n    //     this.dueDate = dueDate;\n    //     this.priority = priority;\n    //     this.taskId = Date.now();\n    //     this.section = checkDueDate(dueDate); // check name if module\n    //     this.category = category; // ie 'tasks' or 'projectName'\n    //     }\n    // };\n\n/* TO DO:\ndefault view is today\nuser can change view to soon, someday, or completed\nuser clicks button to add task\nmodal window opens\nuser inputs info into the form\non submit the form data is stored as an object\ntask objects are kept in localstorage\nuser can categorise tasks\nif dueDate is today it goes into today tasklist\nif dueDate exists but is not today it goes into soon tasklist\nif no dueDate exists it goes into someday tasklist\nuser can edit all task info\nuser can delete a task\nuser can 'check' off a task\n  when checked a task is moved eg from 'today' to 'completed'\nwhen task is added it appears in the list\nordered by priority, then date added\n*/\n"],"names":["taskList","document","querySelector","createLiElement","task","listItem","createElement","classList","add","setAttribute","id","taskPrimaryWrap","check","type","title","textContent","taskSecondaryWrap","notes","taskNotes","detailsRow","dueDate","priority","iconWrap","editBtn","innerHTML","delBtn","appendChild","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","form","list","tasks","showState","console","log","table","JSON","parse","localStorage","getItem","addEventListener","event","preventDefault","currentTarget","value","tasknotes","Date","now","completed","push","length","target","reset","dispatchEvent","CustomEvent","forEach","setItem","stringify","closest","matches","filteredTasks","filter","deleteTask","taskRef","find","markComplete","localStorageTasks","restoreFromLocalStorage"],"sourceRoot":""}