{"version":3,"file":"index.bundle.js","mappings":"MAAAA,QAAQC,IAAI,kCAGZ,MAAMC,EAAOC,SAASC,cAAc,kBAC9BC,EAAOF,SAASC,cAAc,cAEpC,IAAIE,EAAQ,GAmGZJ,EAAKK,iBAAiB,UAjGtB,SAAsBC,GAClBA,EAAEC,iBACFT,QAAQC,IAAI,aAEZ,MAIMS,EAAO,CACTC,MALUH,EAAEI,cAAcD,MAAME,MAMhCC,UALcN,EAAEI,cAAcG,UAAUF,MAMxCG,QALYR,EAAEI,cAAcI,QAAQH,MAMpCI,SALaT,EAAEI,cAAcK,SAASJ,MAMtCK,GAAIC,KAAKC,MACTC,WAAW,GAEff,EAAMgB,KAAKZ,GACXV,QAAQC,IAAI,gBAAgBK,EAAMiB,4BAClCf,EAAEgB,OAAOC,QACTpB,EAAKqB,cAAc,IAAIC,YAAY,gBACvC,IA8EAtB,EAAKE,iBAAiB,gBA5EtB,WACIP,QAAQC,IAAIK,GACZ,MAAMsB,EAAOtB,EACbuB,KACInB,GACA,0HAEoBA,EAAKQ,kDAEnBR,EAAKW,UAAY,UAAY,yGAGzBX,EAAKC,qKAKLD,EAAKI,gKAGoBJ,EAAKM,uDACVN,EAAKO,4HAIRP,EAAKC,oQAOHD,EAAKC,kCACjBD,EAAKQ,uPASxBY,KAAK,IACPzB,EAAK0B,UAAYH,CACrB,IAiCAvB,EAAKE,iBAAiB,gBA/BtB,WACIP,QAAQgC,KAAK,iCACbC,aAAaC,QAAQ,QAASC,KAAKC,UAAU9B,GACjD,IA8BAD,EAAKE,iBAAiB,SAAS,SAASC,GAEpC,GAAGA,EAAEgB,OAAOa,QAAQ,QAAS,CAE7B,MAAMC,EAAS9B,EAAEgB,OAAOe,QAAQ,UAC1BrB,EAAKsB,SAASF,EAAOzB,OAMpBL,EAAEgB,OAAOe,QAAQ,WA9B5B,SAAoBrB,GAChBlB,QAAQC,IAAI,gBAAgBiB,GAC5BZ,EAAQA,EAAMmC,QAAO/B,GAAQA,EAAKQ,KAAOA,IACzClB,QAAQC,IAAIK,GACZD,EAAKqB,cAAc,IAAIC,YAAY,gBACvC,CA0BYe,CAAWxB,EAEnB,MAAUV,EAAEgB,OAAOa,QAAQ,yBA1B/B,SAAsBnB,GAClBlB,QAAQC,IAAI,gBAAgBiB,qBAC5B,MAAMyB,EAAUrC,EAAMsC,MAAKlC,GAAQA,EAAKQ,KAAOA,IAC/CyB,EAAQtB,WAAasB,EAAQtB,UAC7BrB,QAAQC,IAAI0C,GACZtC,EAAKqB,cAAc,IAAIC,YAAY,gBACvC,CAsBQkB,CADWL,SAAShC,EAAEgB,OAAOX,OAIrC,IA/CA,WACIb,QAAQgC,KAAK,gCACb,MAAMc,EAAUX,KAAKY,MAAMd,aAAae,QAAQ,UAC5CF,EAAQvB,SACRjB,EAAQwC,EACRzC,EAAKqB,cAAc,IAAIC,YAAY,iBAE3C,CA0CAsB,E","sources":["webpack://todo/./src/index.js"],"sourcesContent":["console.log('running from new index.js file')\n\n// select the form and the list\nconst form = document.querySelector('#add-task-form');\nconst list = document.querySelector('#task-list');\n\nlet tasks = [];\n\nfunction handleSubmit(e) {\n    e.preventDefault();\n    console.log('submitted');\n    // current target is the form, so to access the input you can refer to its name attribute, e.g. we want the input with name 'title' to get the title of the new task\n    const title = e.currentTarget.title.value;\n    const taskNotes = e.currentTarget.tasknotes.value;\n    const dueDate = e.currentTarget.dueDate.value;\n    const priority = e.currentTarget.priority.value;\n    const task = {\n        title,\n        taskNotes,\n        dueDate,\n        priority,\n        id: Date.now(),\n        completed: false,\n    };\n    tasks.push(task);\n    console.log(`There is/are ${tasks.length} task(s) in state.`)\n    e.target.reset();\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n}\n\nfunction displayTasks() {\n    console.log(tasks);\n    const html = tasks.\n    map(\n        task => \n        `<li class=\"list-group-item task-item-wrapper p-1\">\n        <div class=\"task-text-primary\">\n            <input value=\"${task.id}\"\n            type=\"checkbox\" \n            ${task.completed ? 'checked' : ''}\n            class=\"form-check-input m-1\">\n            <span class=\"fw-bold m1\">\n                ${task.title}\n            </span>\n        </div>\n        <div class=\"task-text-secondary text-muted small\">\n            <p class=\"m-1 text-justify\">\n                ${task.taskNotes}\n            </p>\n            <div class=\"d-flex flex-wrap justify-content-between align-items-center\">\n            <span class=\"small m-1\">Due: ${task.dueDate}</span>\n            <span class=\"small m-1\">${task.priority} priority</span>\n\n            <div class=\"d-flex\">\n                <button \n                aria-label=\"edit ${task.title}\" \n                class=\"btn btn-sm\">\n                    <span class=\"material-icons text-primary\">\n                        mode\n                    </span>\n                </button>\n                <button \n                aria-label=\"delete ${task.title}\"\n                value=\"${task.id}\"\n                class=\"btn btn-sm\">\n                    <span class=\"material-icons text-danger\">\n                        delete\n                    </span>\n                </button>\n            </div>\n        </div>\n        </li>`\n    ).join('');\n    list.innerHTML = html;\n}\n\nfunction mirrorToLocalStorage() {\n    console.info('saving tasks to local storage');\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nfunction restoreFromLocalStorage() {\n    console.info('restoring from local storage');\n    const lsTasks = JSON.parse(localStorage.getItem('tasks'));\n    if (lsTasks.length) {\n        tasks = lsTasks;\n        list.dispatchEvent(new CustomEvent('tasksUpdated'));\n    }\n}\n\nfunction deleteTask(id){\n    console.log('deleting task',id);\n    tasks = tasks.filter(task => task.id !== id);\n    console.log(tasks);\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n};\n\nfunction markComplete(id) {\n    console.log(`changed task ${id} complete status`);\n    const taskRef = tasks.find(task => task.id === id);\n    taskRef.completed = !taskRef.completed;\n    console.log(taskRef);\n    list.dispatchEvent(new CustomEvent('tasksUpdated'));\n};\n\nform.addEventListener('submit', handleSubmit);\nlist.addEventListener('tasksUpdated', displayTasks);\nlist.addEventListener('tasksUpdated', mirrorToLocalStorage);\n\nlist.addEventListener('click', function(e) {\n    \n    if(e.target.matches('span')) {\n        // get the parent value not the target value\n    const parent = e.target.closest('button');\n    const id = parseInt(parent.value);\n        // listening for a click on a button\n        // BUT the click actually happens on the span within the button\n        // we can .matches a span, but we can't put a value attribute on a span element (to check the id)\n        // try listening for a span click, then checking if the parent node is a button element\n        // then get the id of the button\n        if(e.target.closest('button')) {\n            deleteTask(id);\n        }\n    } else if(e.target.matches('input[type=checkbox]')) {\n        const id = parseInt(e.target.value);\n        markComplete(id);\n    }\n\n});\n\nrestoreFromLocalStorage();"],"names":["console","log","form","document","querySelector","list","tasks","addEventListener","e","preventDefault","task","title","currentTarget","value","taskNotes","tasknotes","dueDate","priority","id","Date","now","completed","push","length","target","reset","dispatchEvent","CustomEvent","html","map","join","innerHTML","info","localStorage","setItem","JSON","stringify","matches","parent","closest","parseInt","filter","deleteTask","taskRef","find","markComplete","lsTasks","parse","getItem","restoreFromLocalStorage"],"sourceRoot":""}