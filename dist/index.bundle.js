(()=>{console.log("running from new index.js file");const t=document.querySelector("#add-task-form"),e=document.querySelector("#task-list");let n=[];t.addEventListener("submit",(function(t){t.preventDefault(),console.log("submitted");const s={title:t.currentTarget.title.value,taskNotes:t.currentTarget.tasknotes.value,dueDate:t.currentTarget.dueDate.value,priority:t.currentTarget.priority.value,id:Date.now(),completed:!1};n.push(s),console.log(`There is/are ${n.length} task(s) in state.`),t.target.reset(),e.dispatchEvent(new CustomEvent("tasksUpdated"))})),e.addEventListener("tasksUpdated",(function(){console.log(n);const t=n.map((t=>`<li class="list-group-item task-item-wrapper p-1">\n        <div class="task-text-primary">\n            <input value="${t.id}"\n            type="checkbox" \n            ${t.completed?"checked":""}\n            class="form-check-input m-1">\n            <span class="fw-bold m1">\n                ${t.title}\n            </span>\n        </div>\n        <div class="task-text-secondary text-muted small">\n            <p class="m-1 text-justify">\n                ${t.taskNotes}\n            </p>\n            <div class="d-flex flex-wrap justify-content-between align-items-center">\n            <span class="small m-1">Due: ${t.dueDate}</span>\n            <span class="small m-1">${t.priority} priority</span>\n\n            <div class="d-flex">\n                <button \n                aria-label="edit ${t.title}" \n                class="btn btn-sm">\n                    <span class="material-icons text-primary">\n                        mode\n                    </span>\n                </button>\n                <button \n                aria-label="delete ${t.title}"\n                value="${t.id}"\n                class="btn btn-sm">\n                    <span class="material-icons text-danger">\n                        delete\n                    </span>\n                </button>\n            </div>\n        </div>\n        </li>`)).join("");e.innerHTML=t})),e.addEventListener("tasksUpdated",(function(){console.info("saving tasks to local storage"),localStorage.setItem("tasks",JSON.stringify(n))})),e.addEventListener("click",(function(t){if(t.target.matches("span")){const s=t.target.closest("button"),a=parseInt(s.value);t.target.closest("button")&&function(t){console.log("deleting task",t),n=n.filter((e=>e.id!==t)),console.log(n),e.dispatchEvent(new CustomEvent("tasksUpdated"))}(a)}else t.target.matches("input[type=checkbox]")&&function(t){console.log(`changed task ${t} complete status`);const s=n.find((e=>e.id===t));s.completed=!s.completed,console.log(s),e.dispatchEvent(new CustomEvent("tasksUpdated"))}(parseInt(t.target.value))})),function(){console.info("restoring from local storage");const t=JSON.parse(localStorage.getItem("tasks"));t.length&&(n=t,e.dispatchEvent(new CustomEvent("tasksUpdated")))}()})();
//# sourceMappingURL=index.bundle.js.map